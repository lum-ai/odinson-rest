{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"odinson-rest \uf0c1 What is it? \uf0c1 The odinson-rest is a REST-based interface to Odinson How do I use it? \uf0c1 For instruction in usage, see the tutorial after installing. Developing \uf0c1 For instructions on developing the odinson-rest , navigate to the Development section.","title":"Home"},{"location":"#odinson-rest","text":"","title":"odinson-rest"},{"location":"#what-is-it","text":"The odinson-rest is a REST-based interface to Odinson","title":"What is it?"},{"location":"#how-do-i-use-it","text":"For instruction in usage, see the tutorial after installing.","title":"How do I use it?"},{"location":"#developing","text":"For instructions on developing the odinson-rest , navigate to the Development section.","title":"Developing"},{"location":"authors/","text":"Author \uf0c1 Gus Hahn-Powell","title":"Contributors"},{"location":"authors/#author","text":"Gus Hahn-Powell","title":"Author"},{"location":"install/","text":"Install \uf0c1 Requirements \uf0c1 sbt docker = G of RAM REST API \uf0c1 Build \uf0c1 The project can be built using either docker or sbt; however, the recommended method is to use docker. Docker \uf0c1 We construct our docker images using the sbt native-packager plugin: sbt dockerize For information on additional tasks (generating Dockerfiles, publishing images, etc.), see this section of the native-packager documentation . Building docker images for other architectures \uf0c1 sbt \";clean; docker:stage\" cd target/docker/stage docker buildx build --platform=linux/amd64 -o type=docker -t \"lumai/odinson-rest-api:amd64\" . sbt (Scala) \uf0c1 The REST API server can be launched directly using SBT: sbt web","title":"Installation"},{"location":"install/#install","text":"","title":"Install"},{"location":"install/#requirements","text":"sbt docker = G of RAM","title":"Requirements"},{"location":"install/#rest-api","text":"","title":"REST API"},{"location":"install/#build","text":"The project can be built using either docker or sbt; however, the recommended method is to use docker.","title":"Build"},{"location":"install/#docker","text":"We construct our docker images using the sbt native-packager plugin: sbt dockerize For information on additional tasks (generating Dockerfiles, publishing images, etc.), see this section of the native-packager documentation .","title":"Docker"},{"location":"install/#building-docker-images-for-other-architectures","text":"sbt \";clean; docker:stage\" cd target/docker/stage docker buildx build --platform=linux/amd64 -o type=docker -t \"lumai/odinson-rest-api:amd64\" .","title":"Building docker images for other architectures"},{"location":"install/#sbt-scala","text":"The REST API server can be launched directly using SBT: sbt web","title":"sbt (Scala)"},{"location":"tutorial/","text":"REST API \uf0c1 The reader can be used through the REST API. After building the docker image, launch a container using the following command: Navigate to localhost:9000/api to interactively explore the API through the OpenAPI 3.0 specification. Python library \uf0c1 We also provide a Python library as a simple way to build applications that interact with the Odinson REST API. You can either connect to an existing odinson-rest service or launch one using docker. Launching and interacting with a service using docker \uf0c1 from lum.odinson.doc import Document, Fields from lum.odinson.rest.docker import DockerBasedOdinsonAPI # create a local index data_dir = \"/local/path/to/my/data/dir\" engine = DockerBasedOdinsonAPI(local_path=data_dir) # load an Odinson document doc_file = \"path/to/odinson/document.json\" doc = Document.from_file(doc_file) # index the document engine.index(doc) # query the index for res in engine.search(odinson_query=\"[lemma=be]\"): for span in res.spans(): print(f\"{res.document_id} ({res.sentence_index}): {span}\") Common Workflows \uf0c1 ?? sbt \uf0c1 Several command aliases are defined in the build.sbt . These can be altered and added to at the developers discretion. - dockerfile : Command for generating and publishing a docker image ( target/docker/stage ). \uf0c1 dockerize : Command for generating and publishing a docker image. documentize : Generates scaladoc and copies documentation to the docs/ directory.","title":"Usage"},{"location":"tutorial/#rest-api","text":"The reader can be used through the REST API. After building the docker image, launch a container using the following command: Navigate to localhost:9000/api to interactively explore the API through the OpenAPI 3.0 specification.","title":"REST API"},{"location":"tutorial/#python-library","text":"We also provide a Python library as a simple way to build applications that interact with the Odinson REST API. You can either connect to an existing odinson-rest service or launch one using docker.","title":"Python library"},{"location":"tutorial/#launching-and-interacting-with-a-service-using-docker","text":"from lum.odinson.doc import Document, Fields from lum.odinson.rest.docker import DockerBasedOdinsonAPI # create a local index data_dir = \"/local/path/to/my/data/dir\" engine = DockerBasedOdinsonAPI(local_path=data_dir) # load an Odinson document doc_file = \"path/to/odinson/document.json\" doc = Document.from_file(doc_file) # index the document engine.index(doc) # query the index for res in engine.search(odinson_query=\"[lemma=be]\"): for span in res.spans(): print(f\"{res.document_id} ({res.sentence_index}): {span}\")","title":"Launching and interacting with a service using docker"},{"location":"tutorial/#common-workflows","text":"??","title":"Common Workflows"},{"location":"tutorial/#sbt","text":"Several command aliases are defined in the build.sbt . These can be altered and added to at the developers discretion.","title":"sbt"},{"location":"tutorial/#-dockerfile-command-for-generating-and-publishing-a-docker-image-targetdockerstage","text":"dockerize : Command for generating and publishing a docker image. documentize : Generates scaladoc and copies documentation to the docs/ directory.","title":"- dockerfile: Command for generating and publishing a docker image (target/docker/stage)."},{"location":"dev/documentation/","text":"Documentation \uf0c1 API Documentation (Scala) \uf0c1 We use scaladoc to generate our API documentation. To generate API documentaion use the following command: sbt doc This will generate HTML pages documenting the Scala API under target/scala-2.12/api/ . Note These files are copied to the docs/api/odinson-rest directory when the command sbt documentize is used. General Documentation \uf0c1 We use mkdocs to generate our site documentation from markdown. Markdown source files are located under the docs directory. To develop the documentation with live updates use the following command: docker run --rm -it -v $PWD:/app \\ -p 8000:8000 \\ parsertongue/mkdocs:latest \\ mkdocs serve -a 0.0.0.0:8000 Open your browser to localhost:8000 .","title":"Documentation"},{"location":"dev/documentation/#documentation","text":"","title":"Documentation"},{"location":"dev/documentation/#api-documentation-scala","text":"We use scaladoc to generate our API documentation. To generate API documentaion use the following command: sbt doc This will generate HTML pages documenting the Scala API under target/scala-2.12/api/ . Note These files are copied to the docs/api/odinson-rest directory when the command sbt documentize is used.","title":"API Documentation (Scala)"},{"location":"dev/documentation/#general-documentation","text":"We use mkdocs to generate our site documentation from markdown. Markdown source files are located under the docs directory. To develop the documentation with live updates use the following command: docker run --rm -it -v $PWD:/app \\ -p 8000:8000 \\ parsertongue/mkdocs:latest \\ mkdocs serve -a 0.0.0.0:8000 Open your browser to localhost:8000 .","title":"General Documentation"},{"location":"dev/faq/","text":"Development FAQs \uf0c1 When do I have to rebuild the Docker image? \uf0c1 When you have changed build.sbt or any scala files in app . How do I rebuild the Docker image? \uf0c1 To rebuild the Docker image, simply run sbt dockerize in your terminal. Make sure you are in the correct directory, which should be where you cloned the repo. What sbt command line options are there? \uf0c1 To see what commands are available, run sbt tasks .","title":"FAQ"},{"location":"dev/faq/#development-faqs","text":"","title":"Development FAQs"},{"location":"dev/faq/#when-do-i-have-to-rebuild-the-docker-image","text":"When you have changed build.sbt or any scala files in app .","title":"When do I have to rebuild the Docker image?"},{"location":"dev/faq/#how-do-i-rebuild-the-docker-image","text":"To rebuild the Docker image, simply run sbt dockerize in your terminal. Make sure you are in the correct directory, which should be where you cloned the repo.","title":"How do I rebuild the Docker image?"},{"location":"dev/faq/#what-sbt-command-line-options-are-there","text":"To see what commands are available, run sbt tasks .","title":"What sbt command line options are there?"},{"location":"dev/install/","text":"Installing odinson-rest (For Development) \uf0c1 Requirements \uf0c1 docker JDK 11 sbt 2G of RAM Install \uf0c1 Clone the odinson-rest repository. Running \uf0c1 To run the Odinson REST API in development mode, run the following command: sbt web Open your browser to localhost:9000 .","title":"Install"},{"location":"dev/install/#installing-odinson-rest-for-development","text":"","title":"Installing odinson-rest (For Development)"},{"location":"dev/install/#requirements","text":"docker JDK 11 sbt 2G of RAM","title":"Requirements"},{"location":"dev/install/#install","text":"Clone the odinson-rest repository.","title":"Install"},{"location":"dev/install/#running","text":"To run the Odinson REST API in development mode, run the following command: sbt web Open your browser to localhost:9000 .","title":"Running"},{"location":"dev/test/","text":"Testing \uf0c1 Tests can be run using the command: sbt test","title":"Testing"},{"location":"dev/test/#testing","text":"Tests can be run using the command: sbt test","title":"Testing"}]}