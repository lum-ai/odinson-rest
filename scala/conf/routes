# Routes
# This file defines all application routes (Higher priority routes first)
# https://www.playframework.com/documentation/latest/ScalaRouting
# ~~~~

# An example controller showing a sample home page
GET     /                               controllers.Default.redirect(to = "/api")

GET     /api/buildinfo                  controllers.OdinsonController.buildInfo(pretty: Option[Boolean])
GET     /api/config                     controllers.OdinsonController.configInfo(pretty: Option[Boolean])

# API spec
GET     /api                            controllers.OpenApiController.openAPI

# search
+ nocsrf
GET     /api/execute/pattern            controllers.OdinsonController.runQuery(odinsonQuery: String, metadataQuery: Option[String], label: Option[String], commit: Option[Boolean], prevDoc: Option[Int], prevScore: Option[Float], enriched: Boolean = false, pretty: Option[Boolean])

+ nocsrf
POST    /api/execute/grammar            controllers.OdinsonController.executeGrammar()

# document json
+ nocsrf
GET     /api/document/:documentId                   controllers.OdinsonController.odinsonDocumentJsonForId(documentId: String, pretty: Option[Boolean])
# sentence json
+ nocsrf
GET     /api/sentence/:sentenceId                   controllers.OdinsonController.sentenceJsonForSentId(sentenceId: Int, pretty: Option[Boolean])

# parent doc

+ nocsrf
GET     /api/parent/sentence/:sentenceId      controllers.OdinsonController.getParentDocJsonBySentenceId(sentenceId: Int, pretty: Option[Boolean])

# metadata

+ nocsrf
GET     /api/metadata/document/:documentId    controllers.OdinsonController.getMetadataJsonByDocumentId(documentId: String, pretty: Option[Boolean])

+ nocsrf
GET     /api/metadata/sentence/:sentenceId    controllers.OdinsonController.getMetadataJsonBySentenceId(sentenceId: Int, pretty: Option[Boolean])

# counts
GET     /api/numdocs                    controllers.OdinsonController.numDocs
GET     /api/term-freq              controllers.FrequencyController.termFreq(field: String, group: Option[String], filter: Option[String], order: Option[String], min: Option[Int], max: Option[Int], scale: Option[String], reverse: Option[Boolean], pretty: Option[Boolean])
POST    /api/rule-freq                  controllers.FrequencyController.ruleFreq()
GET     /api/term-hist                  controllers.FrequencyController.termHist(field: String, bins: Option[Int], equalProbability: Option[Boolean], xLogScale: Option[Boolean], pretty: Option[Boolean])
POST    /api/rule-hist                  controllers.FrequencyController.ruleHist()

# index
POST    /api/index/document             controllers.OdinsonController.indexDocument()
#DELETE  /api/index/document

# validate
#POST   /api/validate

# corpus info and statistics
GET     /api/corpus                     controllers.OdinsonController.corpusInfo(pretty: Option[Boolean])

# misc
GET     /api/dependencies-vocabulary    controllers.OdinsonController.dependenciesVocabulary(pretty: Option[Boolean])
GET     /api/tags-vocabulary             controllers.FrequencyController.tagsVocabulary(pretty: Option[Boolean])

# resources
GET     /favicon.ico                    controllers.Assets.at(file="images/favicon.ico")
GET     /assets/*file                   controllers.Assets.at(file)
